/*
kompile:
  kompile cink.k --backend symbolic
  
scenario1: initialize arrays with symbolic values
  krun arrsymb.cink -cIN="ListItem(#symInt(n)) ListItem(#symInt(j)) ListItem(#symInt(x)) ListItem(#symInt(a1)) ListItem(#symInt(a2)) ListItem(#symInt(a3))" -cPC="#symInt(n) >Int 0" --search

The tool returns 7 possible execution paths.


scenario2: check if the program ever prints "error"
  krun arrsymb.cink -cIN="ListItem(#symInt(n)) ListItem(#symInt(j)) ListItem(#symInt(x)) ListItem(#symInt(a1)) ListItem(#symInt(a2)) ListItem(#symInt(a3))" -cPC="#symInt(n) >Int 0" --search --pattern="<T> <out> ListItem(\"error\") </out> B:Bag </T>"

The tool finds no solution ("error" is never printed).
*/


void init(int n, int x, int j, int a[]) {
     int i = 0;
     a[j] = x;
     while (a[i] != x && i < n) {
       a[i] = 2 * i;
       i = i + 1;
     }
     
     if (i > j) {
     	print("error");
     }  
}

void main() {
     int n, j, x, i;
     int a[10];
     cin >> n >> j  >> x;
     i = 0;
     while(i < n) {
       cin >> a[i];
       i = i + 1;
     }
     init(n, x, j, a);     
}


