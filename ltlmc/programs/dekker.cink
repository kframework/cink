/* This is Dekker's algorithm for mutual exclusion.
   This program is not meant to be executed, it is meant to be model checked.
   The model-checker can be called either using the "krun" command:

   krun programs/dekker.cink
        --ltlmc "[]Ltl ((eqTo(critical1, 1) ->Ltl eqTo(critical2, 0)) /\Ltl
                        (eqTo(critical2, 1) ->Ltl eqTo(critical1, 0)))"

   If the formula is stored into a file, say form.cink, then the following 
   command can be used:

   krun programs/dekker.cink --ltlmc programs/form-dekker.cink 

   Recall that the definition must be parsed with the command

   kompile cink --transition="kripke"
*/

int flag1 = 0;
int flag2 = 0;
int turn = 1;
int critical1 = 0;
int critical2 = 0;

int dekker1() {
  while (true) {
    // claim the resource
    flag1 = 1; 
    // wait if the other process is using the resource
    while (flag2 == 1) {
      // if waiting for the resource, also wait our turn
      if (!(turn == 1)) {
        // but release the resource while waiting 
        flag1 = 0;
        while(!(turn == 1)) { }
        // Enter critical section
        critical1 = 1;
      }
    }
    // Critical stuff ...
    // Leave critical section
    flag1 = 0;
    critical1 = 0;
    turn = 2;
  }
}

int dekker2() {
  while (true) {
    // claim the resource
    flag1 = 2; 
    // wait if the other process is using the resource
    while (flag1 == 1) {
      // if waiting for the resource, also wait our turn
      if (!(turn == 2)) {
        // but release the resource while waiting 
        flag2 = 0;
        while(!(turn == 2)) { }
        // Enter critical section
        critical2 = 1;
      }
    }
    // Critical stuff ...
    // Leave critical section
    flag2 = 0;
    critical2 = 0;
    turn = 2;
  }
}

int main() {
  std::thread t1(dekker1);
  std::thread t2(dekker2);
}

