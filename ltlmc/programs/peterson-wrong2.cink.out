Vertices:<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> ((int flag2) ;) ((flag2 = 0) ;) ~> ((int 
                  critical1) ;) ((critical1 = 0) ;) ~> ((int critical2) ;) ((
                  critical2 = 0) ;) ~> (int peterson1) ( .Decls ) { (while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) })) } ~> (int peterson2) ( .Decls ) { (while ( true ) 
                  ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 
                  = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) 
                  ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }
                  )) } ~> (int main) ( .Decls ) { ((std::thread t1 ( peterson1
                   , '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(
                  .KList) ) ;)) } ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                flag1 |-> #symScalLoc(1)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> ((int critical1) ;) ((critical1 = 0) ;) ~> ((
                  int critical2) ;) ((critical2 = 0) ;) ~> (int peterson1) ( 
                  .Decls ) { (while ( true ) ({ ((((((flag1 = 1) ;) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0)
                   ;)) ((critical1 = 0) ;)) })) } ~> (int peterson2) ( .Decls 
                  ) { (while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 
                  == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) (
                  (flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) (
                  (critical2 = 0) ;)) })) } ~> (int main) ( .Decls ) { ((
                  std::thread t1 ( peterson1 , '.Exps(.KList) ) ;) (
                  std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) } ~> 
                  execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> ((int critical2) ;) ((critical2 = 0) ;) ~> (
                  int peterson1) ( .Decls ) { (while ( true ) ({ ((((((flag1 =
                   1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while (
                   (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1)
                   ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })) } ~> (int 
                  peterson2) ( .Decls ) { (while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })) } ~> (int main)
                   ( .Decls ) { ((std::thread t1 ( peterson1 , '.Exps(.KList) 
                  ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) }
                   ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (int peterson1) ( .Decls ) { (while ( true ) (
                  { ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 =
                   0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) (
                  (critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                  ) } ~> (int peterson2) ( .Decls ) { (while ( true ) ({ (((((
                  (flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }))
                   } ~> (int main) ( .Decls ) { ((std::thread t1 ( peterson1 ,
                   '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(
                  .KList) ) ;)) } ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(7) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(5) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) { } ~> (flag2 = 1) ;
                   ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>
Edges:
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> ((int flag2) ;) ((flag2 = 0) ;) ~> ((int 
                  critical1) ;) ((critical1 = 0) ;) ~> ((int critical2) ;) ((
                  critical2 = 0) ;) ~> (int peterson1) ( .Decls ) { (while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) })) } ~> (int peterson2) ( .Decls ) { (while ( true ) 
                  ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 
                  = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) 
                  ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }
                  )) } ~> (int main) ( .Decls ) { ((std::thread t1 ( peterson1
                   , '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(
                  .KList) ) ;)) } ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                flag1 |-> #symScalLoc(1)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> ((int critical1) ;) ((critical1 = 0) ;) ~> ((
                  int critical2) ;) ((critical2 = 0) ;) ~> (int peterson1) ( 
                  .Decls ) { (while ( true ) ({ ((((((flag1 = 1) ;) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0)
                   ;)) ((critical1 = 0) ;)) })) } ~> (int peterson2) ( .Decls 
                  ) { (while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 
                  == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) (
                  (flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) (
                  (critical2 = 0) ;)) })) } ~> (int main) ( .Decls ) { ((
                  std::thread t1 ( peterson1 , '.Exps(.KList) ) ;) (
                  std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) } ~> 
                  execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> ((int critical1) ;) ((critical1 = 0) ;) ~> ((
                  int critical2) ;) ((critical2 = 0) ;) ~> (int peterson1) ( 
                  .Decls ) { (while ( true ) ({ ((((((flag1 = 1) ;) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0)
                   ;)) ((critical1 = 0) ;)) })) } ~> (int peterson2) ( .Decls 
                  ) { (while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 
                  == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) (
                  (flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) (
                  (critical2 = 0) ;)) })) } ~> (int main) ( .Decls ) { ((
                  std::thread t1 ( peterson1 , '.Exps(.KList) ) ;) (
                  std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) } ~> 
                  execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> ((int critical2) ;) ((critical2 = 0) ;) ~> (
                  int peterson1) ( .Decls ) { (while ( true ) ({ ((((((flag1 =
                   1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while (
                   (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1)
                   ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })) } ~> (int 
                  peterson2) ( .Decls ) { (while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })) } ~> (int main)
                   ( .Decls ) { ((std::thread t1 ( peterson1 , '.Exps(.KList) 
                  ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) }
                   ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> ((int critical2) ;) ((critical2 = 0) ;) ~> (
                  int peterson1) ( .Decls ) { (while ( true ) ({ ((((((flag1 =
                   1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while (
                   (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1)
                   ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })) } ~> (int 
                  peterson2) ( .Decls ) { (while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })) } ~> (int main)
                   ( .Decls ) { ((std::thread t1 ( peterson1 , '.Exps(.KList) 
                  ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;)) }
                   ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (int peterson1) ( .Decls ) { (while ( true ) (
                  { ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 =
                   0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) (
                  (critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                  ) } ~> (int peterson2) ( .Decls ) { (while ( true ) ({ (((((
                  (flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }))
                   } ~> (int main) ( .Decls ) { ((std::thread t1 ( peterson1 ,
                   '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(
                  .KList) ) ;)) } ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (int peterson1) ( .Decls ) { (while ( true ) (
                  { ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 =
                   0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) (
                  (critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                  ) } ~> (int peterson2) ( .Decls ) { (while ( true ) ({ (((((
                  (flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }))
                   } ~> (int main) ( .Decls ) { ((std::thread t1 ( peterson1 ,
                   '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(
                  .KList) ) ;)) } ~> execute
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
    </store>
    <genv>
        .Map
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(7) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(7) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                noName
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(5) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(5) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(6) ) ~> rvalue ( HOLE ) ~> HOLE ( 
                  '.Exps(.KList) ) ~> HOLE ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                .List
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) { } ~> (flag2 = 1) ;
                   ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) { } ~> (flag2 = 1) ;
                   ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 1 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( 
                  true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ (((
                  (flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)
                  ) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((
                  flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(4) , 0 ) ~> lval ( #symScalLoc(4) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag2 = 1) ;) (while (
                   (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) )
                   { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 
                  0) ;)) ((critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 1
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 1 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (
                  while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (
                  critical2 = 1) ; ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> 
                  while ( true ) ({ ((((((flag2 = 1) ;) (while ( (flag1 == 1) 
                  ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) ((flag2
                   = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0) ;)) ((
                  critical2 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag2 = 0) ;) 
                  (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }) (while ( (
                  flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) {
                   })) ((flag2 = 1) ;)) }))) }) else { } ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) { } ~> (flag2 = 1) ;
                   ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $update ( #symScalLoc(2) , 0 ) ~> lval ( #symScalLoc(2) )
                   ~> HOLE ; ~> while ( (flag1 == 1) ) { } ~> (flag2 = 1) ;
                   ~> while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }) ~> (critical2 = 1) ;
                   ~> (flag2 = 0) ; ~> (critical2 = 0) ; ~> while ( true ) ({ 
                  ((((((flag2 = 1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0
                  ) ;) (while ( (flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((
                  critical2 = 1) ;)) ((flag2 = 0) ;)) ((critical2 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 1
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 1 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( 
                  true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ (((
                  (flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)
                  ) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0
                  ) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 0 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> (critical1 = 0) ; ~> while ( true ) ({ ((((((
                  flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(3) , 0 ) ~> lval ( #symScalLoc(3) )
                   ~> HOLE ; ~> while ( true ) ({ ((((((flag1 = 1) ;) (while (
                   (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) )
                   { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 
                  0) ;)) ((critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 1
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
Unlabelled rule [<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $update ( #symScalLoc(1) , 1 ) ~> lval ( #symScalLoc(1) )
                   ~> HOLE ; ~> while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (
                  while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) ~> (
                  critical1 = 1) ; ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> 
                  while ( true ) ({ ((((((flag1 = 1) ;) (while ( (flag2 == 1) 
                  ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) { })) ((flag1
                   = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0) ;)) ((
                  critical1 = 0) ;)) }) ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 0
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>,<T>
    <in>
        ListItem(#buffer ( "\n" ))
    </in>
    <out>
        ListItem(#buffer ( "" ))
    </out>
    <threads>
        <thread>
            <k>
                $lookup ( #symScalLoc(2) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ (({ ((((flag1 = 0) ;) 
                  (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }) (while ( (
                  flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 == 1) ) {
                   })) ((flag1 = 1) ;)) }))) }) else { } ~> (critical1 = 1) ;
                   ~> (flag1 = 0) ; ~> (critical1 = 0) ; ~> while ( true ) ({ 
                  ((((((flag1 = 1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0
                  ) ;) (while ( (flag2 == 1) ) { })) ((flag1 = 1) ;)) }))) ((
                  critical1 = 1) ;)) ((flag1 = 0) ;)) ((critical1 = 0) ;)) })
                   ~> return noVal ;
            </k>
            <name>
                t1
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
        <thread>
            <k>
                $lookup ( #symScalLoc(1) ) ~> rvalue ( HOLE ) ~> HOLE == 1
                   ~> rvalue ( HOLE ) ~> if ( HOLE ) ({ ({ } (while ( (flag1 
                  == 1) ) { })) }) else { } ~> (flag2 = 1) ; ~> while ( (flag1
                   == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 == 1) ) { })) 
                  ((flag2 = 1) ;)) }) ~> (critical2 = 1) ; ~> (flag2 = 0) ;
                   ~> (critical2 = 0) ; ~> while ( true ) ({ ((((((flag2 = 1) 
                  ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (
                  flag1 == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;
                  )) ((flag2 = 0) ;)) ((critical2 = 0) ;)) }) ~> return noVal 
                  ;
            </k>
            <name>
                t2
            </name>
            <return>
                .K
            </return>
            <fstack>
                ( ([ critical1 |-> #symScalLoc(3) critical2 |-> 
                  #symScalLoc(4) flag1 |-> #symScalLoc(1) flag2 |-> 
                  #symScalLoc(2) main |-> #symScalLoc(7) peterson1 |-> 
                  #symScalLoc(5) peterson2 |-> #symScalLoc(6) ]) , HOLE ; )
                  
            </fstack>
            <sideEffects>
                .Bag
            </sideEffects>
            <env>
                critical1 |-> #symScalLoc(3)
                critical2 |-> #symScalLoc(4)
                flag1 |-> #symScalLoc(1)
                flag2 |-> #symScalLoc(2)
                main |-> #symScalLoc(7)
                peterson1 |-> #symScalLoc(5)
                peterson2 |-> #symScalLoc(6)
            </env>
        </thread>
    </threads>
    <store>
        #symScalLoc(1) |-> 1
        #symScalLoc(2) |-> 0
        #symScalLoc(3) |-> 0
        #symScalLoc(4) |-> 0
        #symScalLoc(5) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag1 = 
          1) ;) (while ( (flag2 == 1) ) ({ ((((flag1 = 0) ;) (while ( (flag2 
          == 1) ) { })) ((flag1 = 1) ;)) }))) ((critical1 = 1) ;)) ((flag1 = 0
          ) ;)) ((critical1 = 0) ;)) })) )
        #symScalLoc(6) |-> lambda ( .Decls @ (while ( true ) ({ ((((((flag2 = 
          1) ;) (while ( (flag1 == 1) ) ({ ((((flag2 = 0) ;) (while ( (flag1 
          == 1) ) { })) ((flag2 = 1) ;)) }))) ((critical2 = 1) ;)) ((flag2 = 0
          ) ;)) ((critical2 = 0) ;)) })) )
        #symScalLoc(7) |-> lambda ( .Decls @ ((std::thread t1 ( peterson1 , 
          '.Exps(.KList) ) ;) (std::thread t2 ( peterson2 , '.Exps(.KList) ) ;
          )) )
    </store>
    <genv>
        critical1 |-> #symScalLoc(3)
        critical2 |-> #symScalLoc(4)
        flag1 |-> #symScalLoc(1)
        flag2 |-> #symScalLoc(2)
        main |-> #symScalLoc(7)
        peterson1 |-> #symScalLoc(5)
        peterson2 |-> #symScalLoc(6)
    </genv>
</T>] 
